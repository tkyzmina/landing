(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _initSelects = require("./modules/select/init-selects");
// ---------------------------------

window.addEventListener("DOMContentLoaded", function () {
  (0, _iosVhFix.iosVhFix)();
  window.addEventListener("load", function () {
    (0, _initSelects.initSelects)();
  });
  var burger = document.querySelector(".header__burger");
  var header = document.querySelector(".header");
  burger.addEventListener("click", function () {
    header.classList.toggle("header--open");
  });
});

},{"./modules/select/init-selects":2,"./utils/ios-vh-fix":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSelects = void 0;
window.initSimpleSelects = function () {
  var customSelects = document.querySelectorAll(".js-select:not(.is-initialized)");
  var allActiveElement = document.querySelectorAll("input, checkbox, a, button, textarea, radio, select, option");
  var closeAllLists = function closeAllLists() {
    customSelects.forEach(function (el) {
      el.classList.remove("active");
    });
  };
  var documentClickHandler = function documentClickHandler(_ref) {
    var target = _ref.target;
    if (!target.closest(".js-select")) {
      closeAllLists();
      document.removeEventListener("click", documentClickHandler);
    }
  };
  var documentTabAction = function documentTabAction() {
    allActiveElement.forEach(function (el) {
      el.addEventListener("focus", function () {
        if (!el.closest(".js-select") || el.closest(".js-select") && !el.closest(".js-select").classList.contains("active")) {
          closeAllLists();
        }
      });
    });
  };
  var removeAllActiveClass = function removeAllActiveClass(items) {
    items.forEach(function (el) {
      el.classList.remove("active");
    });
  };
  var selectItemsAction = function selectItemsAction(items) {
    items.forEach(function (el) {
      var selectsHandler = function selectsHandler() {
        var parent = el.closest(".js-select");
        var input = parent.querySelector("input");
        var hiddenInput = parent.querySelector("input[data-hidden-input]");
        input.value = el.innerText;
        var idValue = el.dataset.value;
        if (idValue) {
          hiddenInput.value = idValue;
        } else {
          hiddenInput.value = "";
        }
        closeAllLists();
        removeAllActiveClass(items);
        el.classList.add("active");
        var changeEv = new CustomEvent("change");
        var inputEv = new CustomEvent("input");
        input.dispatchEvent(changeEv);
        input.dispatchEvent(inputEv);
        var form = el.closest("form");
        if (form) {
          var formChangeEv = new CustomEvent("change");
          var formInputEv = new CustomEvent("input");
          form.dispatchEvent(formChangeEv);
          form.dispatchEvent(formInputEv);
        }
      };
      el.addEventListener("click", selectsHandler);
      el.addEventListener("keydown", function (e) {
        var isEnter = e.key === "Enter";
        if (isEnter) {
          selectsHandler();
        }
      });
    });
  };
  var onSelectInputClick = function onSelectInputClick(_ref2) {
    var target = _ref2.target;
    var parent = target.closest(".js-select");
    document.addEventListener("click", documentClickHandler);
    if (parent.classList.contains("active")) {
      closeAllLists();
    } else {
      parent.classList.add("active");
    }
  };
  var onSelectInputKeydown = function onSelectInputKeydown(e) {
    var parent = e.target.closest(".js-select");
    var isEnter = e.key === "Enter";
    document.addEventListener("click", documentClickHandler);
    if (isEnter) {
      e.preventDefault();
      if (parent.classList.contains("active")) {
        closeAllLists();
      } else {
        parent.classList.add("active");
      }
    }
  };
  var getDefaultSelect = function getDefaultSelect(arr) {
    var currentValue = false;
    arr.forEach(function (item) {
      if (item.classList.contains("active")) {
        if (item.dataset.value) {
          currentValue = item.dataset.value;
        } else {
          currentValue = item.textContent;
        }
      }
    });
    return currentValue;
  };
  var initSelect = function initSelect(select) {
    select.classList.add("is-initialized");
    var selectInput = select.querySelector("label input");
    var selectItems = select.querySelectorAll("li");
    var hiddenInput = document.createElement("input");
    var hiddenInputName = selectInput.dataset.selectName;
    var defaultValue = getDefaultSelect(selectItems);
    hiddenInput.setAttribute("type", "text");
    hiddenInput.setAttribute("name", hiddenInputName);
    hiddenInput.setAttribute("data-hidden-input", "");
    if (defaultValue) {
      hiddenInput.setAttribute("value", defaultValue);
    } else {
      hiddenInput.setAttribute("value", "");
    }
    hiddenInput.style.display = "none";
    select.appendChild(hiddenInput);
    selectInput.addEventListener("click", onSelectInputClick);
    selectInput.addEventListener("keydown", onSelectInputKeydown);
    selectItemsAction(selectItems);
  };
  if (customSelects.length) {
    customSelects.forEach(function (select) {
      return initSelect(select);
    });
    documentTabAction();
  }
};
var initSelects = function initSelects() {
  window.initSimpleSelects();
};
exports.initSelects = initSelects;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};
exports.iosChecker = iosChecker;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};
exports.iosVhFix = iosVhFix;

},{"./ios-checker":3}]},{},[1])


//# sourceMappingURL=main.min.js.map
